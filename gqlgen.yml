# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graph/schema/*.graphql

# Where should the generated server code go?
exec:
  package: graph
  layout: single-file # Only other option is "follow-schema," ie multi-file.

  # Only for single-file layout:
  filename: graph/generated.go

  # Only for follow-schema layout:
  # dir: graph
  # filename_template: "{name}.generated.go"

  # Optional: Maximum number of goroutines in concurrency to use per child resolvers(default: unlimited)
  # worker_limit: 1000

# Uncomment to enable federation
# federation:
#   filename: graph/federation.go
#   package: graph
#   version: 2
#   options:
#     computed_requires: true

# Where should any generated models go?
model:
  filename: models/models_gen.go
  package: models

  # Optional: Pass in a path to a new gotpl template to use for generating the models
  # model_template: [your/path/model.gotpl]

# Where should the resolver implementations go?
resolver:
  package: graph
  layout: follow-schema # Only other option is "single-file."
  dir: graph # Store resolvers in resolvers/ folder
  filename_template: '{name}.resolvers.go' # Each entity gets its own resolver file

 
call_argument_directives_with_null: true


# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
#  - "github.com/Diegoes7/meetups/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  User:
    model: github.com/Diegoes7/meetups/models.User
    fields:
      meetups:
        resolver: true
  Meetup:
    model: github.com/Diegoes7/meetups/models.Meetup
    fields:
      user:
        resolver: true
  AuthToken:
    model: github.com/Diegoes7/meetups/models.AuthToken
  AuthResponse:
    model: github.com/Diegoes7/meetups/models.AuthResponse
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  UUID:
    model:
      - github.com/99designs/gqlgen/graphql.UUID
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int32
  Int64:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64

      
# models:
#   User:
#     model: github.com/Diegoes7/meetups/models.User
#     fields:
#       meetups:
#         resolver: true # force a resolver to be generated
#   Meetup:
#     model: github.com/Diegoes7/meetups/models.Meetup
#     fields:
#       user:
#         resolver: true # force a resolver to be generated
#   AuthToken:
#     model: github.com/Diegoes7/meetups/models.AuthToken
#   AuthResponse:
#     model: github.com/Diegoes7/meetups/models.AuthResponse
#   ID:
#     model:
#       - github.com/99designs/gqlgen/graphql.ID
#       - github.com/99designs/gqlgen/graphql.Int
#       - github.com/99designs/gqlgen/graphql.Int64
#       - github.com/99designs/gqlgen/graphql.Int32
#   # gqlgen provides a default GraphQL UUID convenience wrapper for github.com/google/uuid
#   # but you can override this to provide your own GraphQL UUID implementation
#   UUID:
#     model:
#       - github.com/99designs/gqlgen/graphql.UUID

#   # The GraphQL spec explicitly states that the Int type is a signed 32-bit
#   # integer. Using Go int or int64 to represent it can lead to unexpected
#   # behavior, and some GraphQL tools like Apollo Router will fail when
#   # communicating numbers that overflow 32-bits.
#   #
#   # You may choose to use the custom, built-in Int64 scalar to represent 64-bit
#   # integers, or ignore the spec and bind Int to graphql.Int / graphql.Int64
#   # (the default behavior of gqlgen). This is fine in simple use cases when you
#   # do not need to worry about interoperability and only expect small numbers.
#   Int:
#     model:
#       - github.com/99designs/gqlgen/graphql.Int32
#   Int64:
#     model:
#       - github.com/99designs/gqlgen/graphql.Int
#       - github.com/99designs/gqlgen/graphql.Int64
