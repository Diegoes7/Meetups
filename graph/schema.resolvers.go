package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"

	"github.com/Diegoes7/meetups/models"
)

// Dummy is the resolver for the _dummy field.
func (r *mutationResolver) Dummy(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Dummy - _dummy"))
}

// Dummy is the resolver for the _dummy field.
func (r *queryResolver) Dummy(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Dummy - _dummy"))
}

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *models.TimeUnix, error) {
	panic(fmt.Errorf("not implemented: CurrentTime - currentTime"))
}

// MeetupUpdates is the resolver for the meetupUpdates field.
func (r *subscriptionResolver) MeetupUpdates(ctx context.Context, meetupID string) (<-chan *models.MeetupUpdate, error) {
	// Subscribe to the given meetupID using the SubscriptionManager
	ch := SubManager.Subscribe(meetupID)
	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
