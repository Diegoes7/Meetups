enum InvitationStatus {
	Pending
	Accepted
	declined
}

type Meetup {
	id: ID!
	name: String!
	description: String!
	user: User!
}

type Invitation {
	ID: ID!
	MeetupID: ID!
	UserID: ID!
	Status: InvitationStatus!
}

input NewMeetup {
	name: String!
	description: String!
}

input UpdateMeetup {
	name: String
	description: String
}

input MeetupsFilter {
	name: String
}

input InviteUserInput {
	meetupID: ID!
	userID: ID!
}

input NewMessageInput {
	meetupID: ID!
	content: String!
	# user: User!
}

input UpdateMessageInput {
	messageID: ID!
	content: String!
}

extend type Query {
	meetups(filter: MeetupsFilter, limit: Int = 10, offset: Int = 0): [Meetup!]!
	getMeetupUsersInvited(meetupID: ID!): [User!]!
	meetup(meetupID: ID!): Meetup!

	getMessagesByMeetup(
		meetupID: ID!
		limit: Int = 50
		offset: Int = 0
	): [Message!]!
}

extend type Mutation {
	createMeetup(input: NewMeetup!): Meetup!
	updateMeetup(id: ID!, input: UpdateMeetup!): Meetup!
	deleteMeetup(id: ID!): Boolean!

	#! New mutation to start a meetup
	startMeetup(meetupID: ID!): Boolean!
	inviteUser(input: InviteUserInput!): User!
	removeUser(input: InviteUserInput!, loginUserID: ID!): User!
	closeMeetup(meetupID: ID!): Boolean!

	#! messages
	sendMessage(input: NewMessageInput!): Message!
	editMessage(input: UpdateMessageInput!): Message!
	deleteMessage(messageID: ID!): Boolean!
}
