package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"errors"
	"fmt"

	"github.com/Diegoes7/meetups/middleware"
	"github.com/Diegoes7/meetups/models"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input *models.RegisterArgs) (*models.AuthResponse, error) {
	isValid := validation(ctx, input)
	if !isValid {
		return nil, errors.New("input errors")
	}

	return r.Domain.Register(ctx, input)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input models.LoginInput) (*models.AuthResponse, error) {
	isValid := validation(ctx, &input)
	if !isValid {
		return nil, errors.New("input errors")
	}

	return r.Domain.Login(ctx, input)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*models.User, error) {
	return r.Domain.UserRepo.GetUserByID(id)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	return r.Domain.UserRepo.GetUsers()
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	user, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		return nil, fmt.Errorf("unauthenticated: %w", err)
	}
	return user, nil
}

// Meetups is the resolver for the meetups field.
func (r *userResolver) Meetups(ctx context.Context, obj *models.User) ([]*models.Meetup, error) {
	return r.Domain.MeetupRepo.GetMeetupsForUser(obj)
}

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
