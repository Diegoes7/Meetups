// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Invitation struct {
	tableName struct{} `pg:"meetup_invitations"`
	ID       string           `json:"ID"`
	MeetupID string           `json:"MeetupID"`
	UserID   string           `json:"UserID"`
	Status   InvitationStatus `json:"Status"`
}

type InviteUserInput struct {
	MeetupID string `json:"meetupID"`
	UserID   string `json:"userID"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type MeetupUpdate struct {
	MeetupID   string   `json:"meetupId"`
	Started    bool     `json:"started"`
	Closed     bool     `json:"closed"`
	NewMessage *Message `json:"newMessage,omitempty"`
}

type MeetupsFilter struct {
	Name *string `json:"name,omitempty"`
}

type Message struct {
	ID        string    `json:"id"`
	SenderID  string    `json:"senderID"`
	MeetupID  string    `json:"meetupID"`
	Content   string    `json:"content"`
	Timestamp time.Time `json:"timestamp"`
	// Sender    *User     `json:"sender"`
	 Sender    *User     `json:"sender" pg:"rel:has-one,fk:sender_id"` // Add pg tag for ORM to join
}

type Mutation struct {
}

type NewMeetup struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type NewMessageInput struct {
	MeetupID string `json:"meetupID"`
	Content  string `json:"content"`
}

type Query struct {
}

type RegisterArgs struct {
	Username        string `json:"username"`
	Email           string `json:"email"`
	Password        string `json:"password"`
	ConfirmPassword string `json:"confirmPassword"`
	FirstName       string `json:"firstName"`
	LastName        string `json:"lastName"`
}

type Subscription struct {
}

type TimeUnix struct {
	UnixTime  int32  `json:"unixTime"`
	TimeStamp string `json:"timeStamp"`
}

type UpdateMeetup struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type UpdateMessageInput struct {
	MessageID string `json:"messageID"`
	Content   string `json:"content"`
}

type InvitationStatus string

const (
	InvitationStatusPending  InvitationStatus = "Pending"
	InvitationStatusAccepted InvitationStatus = "Accepted"
	InvitationStatusDeclined InvitationStatus = "declined"
)

var AllInvitationStatus = []InvitationStatus{
	InvitationStatusPending,
	InvitationStatusAccepted,
	InvitationStatusDeclined,
}

func (e InvitationStatus) IsValid() bool {
	switch e {
	case InvitationStatusPending, InvitationStatusAccepted, InvitationStatusDeclined:
		return true
	}
	return false
}

func (e InvitationStatus) String() string {
	return string(e)
}

func (e *InvitationStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InvitationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InvitationStatus", str)
	}
	return nil
}

func (e InvitationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
