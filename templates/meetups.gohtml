{{ define "meetups" }}
<script type="module">
	import { fetchInvitedUsers } from '/templates/static/meetup.js';

	async function fetchData() {
		try {
			const response = await fetch('http://localhost:8080/query', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({
					query: `{
          meetups {
            id
            name
            description
            userID
          }
          users {
            id
            username
            email
            firstName
            lastName
          }
        }`,
				}),
			});

			if (!response.ok) throw new Error('Network response was not ok');

			const data = await response.json();

			if (!data.data) {
				document.getElementById(
					'users'
				).innerHTML = `<h3 style="padding-top: 1em;">No coworkers register yet.</h3>`;
			}

			const meetups = data.data.meetups;
			const users = data.data.users;

			// Fetch all invited users *in parallel*
			const invitedUsersList = await Promise.all(
				meetups.map((meetup) => fetchInvitedUsers(meetup.id))
			);

			let meetupsHTML = '';

			if (meetups.length === 0) {
				document.getElementById(
					'meetups'
				).innerHTML = `<h3>No meetups created yet.</h3>`;
			}

			for (let i = 0; i < meetups.length; i++) {
				const meetup = meetups[i];
				const invitedUsers = invitedUsersList[i];

				console.log(invitedUsersList[i]);
				const creator = users.find((user) => user.id === meetup.userID);

				const isCreator = CURRENT_USER && CURRENT_USER.id === meetup.userID;
				const deleteButtonHTML = isCreator
					? `<button class="delete_button" data-meetup-id="${meetup.id}">Delete</button>`
					: '';

				const isInvited = invitedUsers.some((u) => u.id === CURRENT_USER.id);
				const enterBtn =
					isInvited || isCreator
						? `<button class="enter_btn" data-meetup-id="${meetup.id}">Enter</button>`
						: '';

				meetupsHTML += ` <li id="single_meetup" class="meetup">
  											  <div style="display: flex; justify-content: space-between; align-items: flex-start;flex-direction: column; width: 80%">
  											    <span style="max-width: 100%;"> <strong>${i + 1}. ${
					meetup.name
				}</strong></span>
														<span style="flex: 1; margin: 0.5em; padding-left: 1em; white-space: nowrap;
																overflow: hidden; text-overflow: ellipsis; max-width: 100%;">
																	Info: ${meetup.description}</span>
														<p style="margin: 0.5em; padding-left:1em; font-weight: bold; max-width: 100%;">creator: ${
															creator.firstName
														} ${creator.lastName}</p>
														</div>
														<div style="display: flex; justify-content: space-between; flex-direction: column; margin-left: 1.5em;">
														${enterBtn}
 														${deleteButtonHTML}
													</div>
  											</li>`;
			}

			document.getElementById('meetups').innerHTML = meetupsHTML;

			// Optionally: render users if needed
			let usersHTML = '';
			users.forEach((user) => {
				usersHTML += `<li><p>${user.username}, ${user.email}, ${user.firstName}, ${user.lastName}</p></li>`;
			});
			document.getElementById('users').innerHTML = usersHTML;
		} catch (error) {
			console.error('Error:', error);
		}
	}

	// Navigate to active meetup page
	function goToMeetup(meetupId) {
		window.location.href = `/meetup/${meetupId}`;
	}

	async function deleteMeetup(meetupId) {
		if (!confirm('Are you sure you want to delete this meetup?')) {
			return;
		}

		try {
			const response = await fetch('http://localhost:8080/query', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					query: `
          mutation {
            deleteMeetup(id: "${meetupId}")
          }
        `,
				}),
			});

			const result = await response.json();

			if (result.data?.deleteMeetup) {
				alert('Meetup deleted successfully.');
				await fetchData(); // Refresh list
			} else {
				const errorMessage =
					result.errors?.[0]?.message || 'Failed to delete meetup.';
				throw new Error(errorMessage);
			}
		} catch (err) {
			console.error('Error deleting meetup:', err.message);
			alert('Error deleting meetup: ' + err.message);
		}
	}

	window.addEventListener('DOMContentLoaded', async () => {
		// Call your other fetch data function
		await checkSession();
		await fetchData();

		document.querySelectorAll('.enter_btn').forEach((btn) => {
			btn.addEventListener('click', () => {
				const meetupId = btn.dataset.meetupId;
				goToMeetup(meetupId);
			});
		});
	});

	document.getElementById('meetups').addEventListener('click', async (e) => {
		if (e.target.matches('.delete_button')) {
			const meetupId = e.target.getAttribute('data-meetup-id');
			deleteMeetup(meetupId);
		}
	});
</script>
{{ end }}
